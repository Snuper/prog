/*
*/
//#include "functions_tree.h"  ??????? - ????
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <ctime>
#include <conio.h>

using namespace std;


struct Vertex    //??????? ??????
{
   int Data;     //?? ??? ??????? ? ??????
   Vertex *Left;    //????????? ?? ????? ???????
   Vertex *Right;
};

int show(Vertex *&Tree)              //??????? ?????? ? ???? ?? ?????
{
	if (Tree != NULL)               //???? ?? ???????? ?????? ???????
	{
//		cout<<"42"<<endl;
		show(Tree->Left);
		cout<<Tree->Data<<" ";
		show(Tree->Right);
		return Tree->Data;
	}
}

void del(Vertex *&Tree)	//??????? ??????
{
   if (Tree != NULL)
	{
//	   cout<<"42"<<endl;
	   del(Tree->Left);
	   del(Tree->Right);
	   delete Tree;
	   Tree = NULL;
	}
 
}

void SDP (int x, Vertex *&Tree) //??????? ??????????? - ?????????? ???????
{
if (NULL == Tree)
	{
		Tree = new Vertex;
		Tree->Data = x;
		Tree->Left = Tree->Right = NULL;
	}
	if (x < Tree->Data)
	{
		if (Tree->Left != NULL) SDP(x, Tree->Left);
			else
			{
				Tree->Left = new Vertex;
				Tree->Left->Left = Tree->Left->Right = NULL;
				Tree->Left->Data = x;
			}
	}
	if (x > Tree->Data)
	{
		if (Tree->Right != NULL) SDP(x, Tree->Right);
			else
			{
				Tree->Right = new Vertex;
				Tree->Right->Left = Tree->Right->Right = NULL;
				Tree->Right->Data = x;
			}
	}
}

int Razmer (Vertex *&MyTree)
{
	if (MyTree == NULL)
	return 0;
	else
	return (1+Razmer(MyTree->Left)+Razmer(MyTree->Right));
}

int Summ (Vertex *&MyTree)
{
	if (MyTree == NULL)
	return 0;
	else
	return (MyTree->Data+Summ(MyTree->Left)+Summ(MyTree->Right));
}

int Height(Vertex *&MyTree)
{
	if(MyTree == NULL)
	return 0;
	else
	return (1+max(Height(MyTree->Left),Height(MyTree->Right)));
}

int max(int a, int b)
{
	if (a<b)
	return a;
	else
	return b;
}

int Summ_root(Vertex *&MyTree, int h)
{
	if ( MyTree == NULL )
	return 0;
	else
	return (h + Summ_root(MyTree->Left, h+1)+Summ_root(MyTree->Right, h+1));
}

int Height_average(Vertex *&MyTree)
{
	return (Summ_root(MyTree, 1)/Razmer(MyTree));
}

void Search_element (Vertex *&Tree,int element)
{
	int checkout = 0;
		if (Tree != NULL)
	{
		if ( checkout != 1 )
		{
			Search_element(Tree->Left, element);
			if (Tree->Data == element)
			{
				cout << endl << element << " = " <<&Tree;
				checkout = 1;
			}
			Search_element(Tree->Right, element);
		}
	}
}

void Delet_vertex (int Data, Vertex *&Mytree)
{
	Vertex **p;
	p = &Mytree;
	while (*p != NULL)
	
	{
		if ( (*p)->Data < Data ) p = &((*p)->Right);
		else if ( (*p)->Data > Data ) p = &((*p)->Left); //????? ????????? ?????
		else break;
	}
	if ( *p != NULL)
	{
		Vertex *q;
		q = *p;
		if ( q->Left == NULL ) *p = q->Right;
		else if ( q->Right == NULL ) *p = q->Left;
		else
		{
			Vertex *r = q->Left;
			Vertex *s = q;
			while ( r->Right != NULL )
			{
				s = r;
				r = r->Right;
			}
		s->Right = r->Left;
		r->Left = q->Left;
		r->Right = q->Right;
		*p = r;	
		}
	}
}

int main()
{
	setlocale(LC_CTYPE,"rus");
	int M, element_search, *B, element_delet, *F;
	srand (time(0));
	Vertex *Tree = NULL;
	cout << "??????? ???-?? ?????? ??? ???: ";
	cin >> M;
	cout << "\n???\n";
	B = new int [M];
	for (int i=0; i<M; i++) 
	{
		B[i] = rand();
	}
	for (int i=0; i<M; i++) SDP(B[i], Tree);
	cout << endl << "????? ????? ?? ?????: ";
	show(Tree);
	cout<<endl<<"?????? ?????? = "<<Razmer(Tree)<<endl;
	cout<<"????? ?????? = "<<Summ(Tree)<<endl;
	cout<<"?????? ?????? = "<<Height(Tree)<<endl;
	cout<<"??????? ?????? ?????? = "<<Height_average(Tree)<<endl;
//	cout << "\n??????? ??????? ???????: ";
//	cin >> element_search;
//	Search_element(Tree, element);
	cout << "\n??????? ??????????, ??????? ??????? ???????: ";
	cin>>element_delet;
	Delet_vertex(element_delet, Tree);
	show(Tree);
	F = new int [10];
	cout << "\n??????? 10 ??????????, ??????? ??????? ???????: ";
	for ( int o = 0; o<10; o++)
	{
		cin >> F[o];
		Delet_vertex(F[o], Tree);
	}
	cout << endl << "????? ????? ?? ?????: ";
	show(Tree);
	cout<<endl<<"?????? ?????? = "<<Razmer(Tree)<<endl;
	cout<<"????? ?????? = "<<Summ(Tree)<<endl;
	cout<<"?????? ?????? = "<<Height(Tree)<<endl;
	cout<<"??????? ?????? ?????? = "<<Height_average(Tree)<<endl;
	del(Tree);
	return 0;
}
