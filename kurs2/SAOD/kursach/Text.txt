Programming language and List of programming languages
Different programming languages ​​support different styles of programming (called programming paradigms). The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference. Ideally, the programming language best suited for the task at hand will be selected. Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute. Languages ​​form an approximate spectrum from "low-level" to "high-level"; "low-level" languages ​​are typically more machine-oriented and faster to execute, whereas "high-level" languages ​​are more abstract and easier to use but execute less quickly. It is usually easier to code in "high-level" languages ​​than in "low-level" ones.

Allen Downey, in his book, "How To Think Like A Computer Scientist", writes:

The details look different in different languages, but a few basic instructions appear in just about every language:
Input: Gather data from the keyboard, a file, or some other device.
Output: Display data on the screen or send data to a file or other device.
Arithmetic: Perform basic arithmetical operations like addition and multiplication.
Conditional Execution: Check for certain conditions and execute the appropriate sequence of statements.
Repetition: Perform some action repeatedly, usually with some variation.
Many computer languages ​​provide a mechanism to call functions provided by shared libraries. Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.

Programmers
Main article: Programmer
See also: Software developer and Software engineer
Computer programmers are those who write computer software. Their jobs usually involve:

Coding
Debugging
Documentation
Integration
Maintenance
Requirements analysis
Software architecture
Software testing
Specification
See also
icon Computer programming portal
Main article: Outline of computer programming
ACCU
Association for Computing Machinery
Computer networking
Hello world program
Institution of Analysts and Programmers
National coding week
System programming
Computer programming in the punched card era
The art of computer programming
Women in computing
Timeline of women in computing
References
Shaun Bebbington (2014). "What is coding". Retrieved 2014-03-03.
Shaun Bebbington (2014). "What is programming". Retrieved 2014-03-03.
Koetsier, Teun (2001), "On the prehistory of programmable machines: musical automata, looms, calculators", Mechanism and Machine Theory, Elsevier, 36 (5): 589–603, doi: 10.1016 / S0094-114X (01) 00005 -2.
Kapur, Ajay; Carnegie, Dale; Murphy, Jim; Long, Jason (2017). "Loudspeakers Optional: A history of non-loudspeaker-based electroacoustic music." Organized Sound. Cambridge University Press. 22 (2): 195–205. doi: 10.1017 / S1355771817000103. ISSN 1355-7718.
Fowler, Charles B. (October 1967). "The Museum of Music: A History of Mechanical Instruments". Music Educators Journal. 54 (2): 45–49. doi: 10.2307 / 3391092. JSTOR 3391092.
Noel Sharkey (2007), A 13th Century Programmable Robot, University of Sheffield
Dooley, John F. (2013). A Brief History of Cryptology and Cryptographic Algorithms. Springer Science & Business Media. pp. 12–3. ISBN 9783319016283.
Fuegi, J .; Francis, J. (2003). "Lovelace & Babbage and the Creation of the 1843 'notes'." IEEE Annals of the History of Computing. 25 (4): 16. doi: 10.1109 / MAHC.2003.1253887.
"Columbia University Computing History - Herman Hollerith." Columbia.edu. Retrieved 2010-04-25.
"Fortran creator John Backus dies - Tech and gadgets- NBC News." NBC News. 2007-03-20. Retrieved 2010-04-25.
Elshoff, James L .; Marcotty, Michael (1982). "Improving computer program readability to aid modification". Communications of the ACM.
instantiate a template, compilers substitute specific arguments for a template's parameters to generate a concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase "Substitution failure is not an error" (SFINAE). Templates are a powerful tool that can be used for generic programming, template metaprogramming, and code optimization, but this power implies a cost. Template use may increase code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand. [56] This is in contrast to run-time generics seen in other languages ​​(e.g., Java) where at compile-time the type is erased and a single template body is preserved.

Templates are different from macros: while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates are aware of the semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot instantiate new types, recurse, or perform type evaluation and in effect are limited to pre-compilation text-substitution and text-inclusion / exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently instantiate new symbols. Templates are a tool for static polymorphism (see below) and generic programming.

In addition, templates are a compile time mechanism in C ++ that is Turing-complete, meaning that any computation expressible by a computer program can be computed, in some form, by a template metaprogram prior to runtime.

In summary, a template is a compile-time parameterized function or class written without knowledge of the specific arguments used to instantiate it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction.

Objects
Main article: C ++ classes
C ++ introduces object-oriented programming (OOP) features to C. It offers classes, which provide the four features commonly present in OOP (and some non-OOP) languages: abstraction, encapsulation, inheritance, and polymorphism. One distinguishing feature of C ++ classes compared to classes in other programming languages ​​is support for deterministic destructors, which in turn provide support for the Resource Acquisition is Initialization (RAII) concept.

Encapsulation
Encapsulation is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer. C ++ provides the ability to define classes and functions as its primary encapsulation mechanisms. Within a class, members can be declared as either public, protected, or private to explicitly enforce encapsulation. A public member of the class is accessible to any function. A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class ("friends"). A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends.

The object-oriented principle ensures the encapsulation of all and only the functions that access the internal representation of a type. C ++ supports this principle via member functions and friend functions, but it does not enforce it. Programmers can declare parts or all of the representation of